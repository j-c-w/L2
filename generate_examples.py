import random
import json
import os
import argparse
import importlib

def inputs(number):
    # TODO -- Incorporate number.
    return [
            [],
            [1],
            [1, 2],
            [8, 2, 1],
            [99, 38, 23, 12, 90, 32],
            [33, 21, 44, 22, 11, 94, 49, 2, 9, 10, 20],
            [1, 3, 4, 3, 2, 9, 1, 3, 2, 1, 2, 3, 4, 8, 9, 9, 3, 2],
            [1, 2, 1, 9, 3, 2, 1],
            [8, 2, 1, 3, 4]
            ]


def generate_json_from_io(name, inputs, outputs):
    assert len(inputs) == len(outputs)

    result = {}
    result['name'] = name
    result['description'] = 'Autogenerated'
    result['kind'] = 'examples'
    contents = {}
    
    examples = []

    for i in range(len(inputs)):
        inplist = ' '.join([str(x) for x in inputs[i]])
        outlist = ' '.join([str(x) for x in outputs[i]])
        example = '({} [{}]) -> [{}]'.format(name, inplist, outlist)

        examples.append(example)

    contents['examples'] = examples
    result['contents'] = contents
    # TODO --- See flatten.json as an example.
    # result['background'] = []

    return result


def generate(comparisonfunction, basis_functions, numberexamples=10):
    # Get the typical inputs:
    inputslist = inputs(numberexamples)

    # Get the outputs for the comparison function:
    comparisonfunction_outputs = generateoutputs(comparisonfunction, inputslist)

    json_list = []
    for function in basis_functions:
        basis_output = generateoutputs(function, inputslist)
        name = getname(function)

        # Now generate the JSON from that:
        json_item = generate_json_from_io(name, comparisonfunction_outputs, basis_output)
        json_list.append(json_item)

    return json_list


# Takes the module name as input and returns a dictionary 
# representing the input/output examples.
def generateoutputs(modulename, inputslist):
    mod = importlib.import_module(modulename)

    # Go through and put them through the module:
    output = []
    for inp in inputslist:
        output.append(mod.f(inp))

    return output

def getname(modulename):
    mod = importlib.import_module(modulename)
    return mod.name

def write_outputs(json_list, foldername):
    for json_item in json_list:
        outputname = foldername + '/' + json_item['name'] + '.json'

        with open(outputname, 'w') as f:
            json.dump(json_item, f)

def get_basis_functions(folder):
    files = os.listdir(folder)
    files = [f.replace('.py', '') for f in files if f.endswith('.py')]

    folder = folder.replace('/', '.')
    files = [folder + '.' + f for f in files]

    return files

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("comparison_function")
    parser.add_argument("output_folder")
    parser.add_argument("--num-examples", dest="num_examples", default=10)
    parser.add_argument("--basis-folder", dest="basis_folder", default="basis_functions")

    args = parser.parse_args()

    comparison_function = args.comparison_function
    basisfiles = get_basis_functions(args.basis_folder)
    print("Loading from basis files " + str(basisfiles))

    json_list = generate(comparison_function, basisfiles)
    write_outputs(json_list, args.output_folder)
