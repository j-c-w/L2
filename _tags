# OASIS_START
# DO NOT EDIT (digest: 5de01aced9866ad978ee0a8dbc3d65f9)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library l2
"src/l2-lib/l2.cmxs": use_l2
"src/l2-lib/ast.cmx": for-pack(L2)
"src/l2-lib/collections.cmx": for-pack(L2)
"src/l2-lib/combinat.cmx": for-pack(L2)
"src/l2-lib/config.cmx": for-pack(L2)
"src/l2-lib/eval.cmx": for-pack(L2)
"src/l2-lib/example_deduction.cmx": for-pack(L2)
"src/l2-lib/example.cmx": for-pack(L2)
"src/l2-lib/expr.cmx": for-pack(L2)
"src/l2-lib/exprValue.cmx": for-pack(L2)
"src/l2-lib/fast_example_deduction.cmx": for-pack(L2)
"src/l2-lib/higher_order_deduction.cmx": for-pack(L2)
"src/l2-lib/hypothesis.cmx": for-pack(L2)
"src/l2-lib/infer.cmx": for-pack(L2)
"src/l2-lib/lexer_sexp.cmx": for-pack(L2)
"src/l2-lib/lexer_ml.cmx": for-pack(L2)
"src/l2-lib/library.cmx": for-pack(L2)
"src/l2-lib/parser_sexp.cmx": for-pack(L2)
"src/l2-lib/parser_ml.cmx": for-pack(L2)
"src/l2-lib/random_deduction.cmx": for-pack(L2)
"src/l2-lib/recursive_spec_deduction.cmx": for-pack(L2)
"src/l2-lib/rewrite.cmx": for-pack(L2)
"src/l2-lib/sstream.cmx": for-pack(L2)
"src/l2-lib/status.cmx": for-pack(L2)
"src/l2-lib/structure.cmx": for-pack(L2)
"src/l2-lib/synthesis_common.cmx": for-pack(L2)
"src/l2-lib/testcase.cmx": for-pack(L2)
"src/l2-lib/unify.cmx": for-pack(L2)
"src/l2-lib/util.cmx": for-pack(L2)
"src/l2-lib/v1_engine.cmx": for-pack(L2)
"src/l2-lib/v1_solver_engine.cmx": for-pack(L2)
"src/l2-lib/v2_engine.cmx": for-pack(L2)
"src/l2-lib/value.cmx": for-pack(L2)
"src/l2-lib/verify.cmx": for-pack(L2)
"src/l2-lib/l2.cmxa": oasis_library_l2_byte
<src/l2-lib/*.ml{,i,y}>: oasis_library_l2_byte
"src/l2-lib/l2.cmxa": oasis_library_l2_native
<src/l2-lib/*.ml{,i,y}>: oasis_library_l2_native
<src/l2-lib/*.ml{,i,y}>: package(core)
<src/l2-lib/*.ml{,i,y}>: package(core_extended)
<src/l2-lib/*.ml{,i,y}>: package(hashcons)
<src/l2-lib/*.ml{,i,y}>: package(yojson)
# Executable l2_cli_native
"src/l2-cli/l2.native": oasis_executable_l2_cli_native_byte
<src/l2-cli/*.ml{,i,y}>: oasis_executable_l2_cli_native_byte
"src/l2-cli/l2.native": oasis_executable_l2_cli_native_native
<src/l2-cli/*.ml{,i,y}>: oasis_executable_l2_cli_native_native
"src/l2-cli/l2.native": package(core)
"src/l2-cli/l2.native": package(core_extended)
"src/l2-cli/l2.native": package(hashcons)
"src/l2-cli/l2.native": package(yojson)
"src/l2-cli/l2.native": use_l2
# Executable l2_cli_byte
"src/l2-cli/l2.byte": oasis_executable_l2_cli_byte_byte
<src/l2-cli/*.ml{,i,y}>: oasis_executable_l2_cli_byte_byte
"src/l2-cli/l2.byte": oasis_executable_l2_cli_byte_native
<src/l2-cli/*.ml{,i,y}>: oasis_executable_l2_cli_byte_native
"src/l2-cli/l2.byte": package(core)
"src/l2-cli/l2.byte": package(core_extended)
"src/l2-cli/l2.byte": package(hashcons)
"src/l2-cli/l2.byte": package(yojson)
"src/l2-cli/l2.byte": use_l2
<src/l2-cli/*.ml{,i,y}>: package(core)
<src/l2-cli/*.ml{,i,y}>: package(core_extended)
<src/l2-cli/*.ml{,i,y}>: package(hashcons)
<src/l2-cli/*.ml{,i,y}>: package(yojson)
<src/l2-cli/*.ml{,i,y}>: use_l2
# Executable l2_tests
"src/l2-tests/tests.native": oasis_executable_l2_tests_byte
<src/l2-tests/*.ml{,i,y}>: oasis_executable_l2_tests_byte
"src/l2-tests/tests.native": oasis_executable_l2_tests_native
<src/l2-tests/*.ml{,i,y}>: oasis_executable_l2_tests_native
"src/l2-tests/tests.native": package(core)
"src/l2-tests/tests.native": package(core_extended)
"src/l2-tests/tests.native": package(hashcons)
"src/l2-tests/tests.native": package(oUnit)
"src/l2-tests/tests.native": package(yojson)
"src/l2-tests/tests.native": use_l2
<src/l2-tests/*.ml{,i,y}>: package(core)
<src/l2-tests/*.ml{,i,y}>: package(core_extended)
<src/l2-tests/*.ml{,i,y}>: package(hashcons)
<src/l2-tests/*.ml{,i,y}>: package(oUnit)
<src/l2-tests/*.ml{,i,y}>: package(yojson)
<src/l2-tests/*.ml{,i,y}>: use_l2
# OASIS_STOP
true: use_menhir
true: debug
<**/*.ml{,i}>: predicate(ppx_driver)
<**/*.ml{,i}>: pp(ppx-jane -dump-ast)
